continue
cart.products.select { |p| p.id == self.id }
self
cart.products
cart
cp.product.price
cp.product
cp.producut
cp
cp = cart.cart_products.first
cp = 
cart.cart_products.first.price
cart.cart_products.first.quantity
cart.cart_products.first
cart.cart_products.length
cart.cart_products
cart
self.id
cart
self
selected_product
continue
purchase_info[2]
purchase_info[1]
purchase_info[0]
purchase_info
continue
co_info = @cart.checkout[0]
co_info = @cart.checkout
@cart.checkout
info
continue
sum
continue
cart_product.product.price
cart_product.quantity
cart_product
continue
cart_product.product.price
cart_product.quantity
cart_product
continue
cart_product.product.price
cart_product.quantity
cart_product
continue
@cart.total_price
@cart
@user.cart
@user
continue
self.id
cart_product.product_id
cart_product
info
continue
@total_price
continue
@confirmed_purchases.each do |product, count| puts "product: #{product}, count:#{count}" end
@confirmed_purchases
confirmed[1]
confirmed[0]
confirmed.flatten
confirmed.quantity
confirmed
continue
render :checkout
co_info[1]
co_info[2]
co_info[0]
co_info
co_info = @cart.checkout
@cart.checkout
info
continue
in_stock
in_stock = self.hsh_of_products_in_seller_inventory
self.not_in_stock
self.hsh_of_products_in_seller_inventory
self
continue
in_stock.each { |k, v| puts "key:#{k}, val:#{v}" }
in_stock.each { |k, v| puts "key:#{k}, val:#{val}" }
in_stock.each { |pair| puts "#{pair}" }
in_stock.each do |pair|
in_stock
continue
self.products.reject { |product| to_be_sold.keys.include?(product.name) }
self.products
to_be_sold
continue
to_be_sold
self.not_in_stock
self
selected
continue
self.not_in_stock
self
not_in_stock
selected
continue
self.cart_products.first
self.cart_products
product
self
product.inventory
product = self.products.first
self.products.reject { |product| to_be_sold.include?(product) }
self.products
self.cart_products.product
self.cart_products
self.cart_products.products
self.cart_products.products.reject { |product| to_be_sold.include?(product) }
to_be_sol
self.cart_products
to_be_sold
to_be_sold = list_of_products_in_seller_inventory
to_be_sold =     self.cart_products.reject { |cart}
self.cart_products
list_of_products_in_seller_inventory
list_of_products_in_seller_iventory
selected
continue
self.cart_products.length
self.cart_products
self.products
self.prodcuts
@cart
self
continue
exit
@products
@user
exit
product_params
continue
params
product_params
continue
exit
current_product.destroy
current_product
CartProduct.all.select { |cart_product| cart_product.product_id == current_product.id }.destroy
CartProduct.all.select { |cart_product| cart_product.product_id == current_product.id }
exit
